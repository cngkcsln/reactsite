{"version":3,"sources":["Assets/loader.gif","logo.svg","containers/SeriesList/index.js","containers/Loader/index.js","components/intro/index.js","containers/Series/index.js","containers/SingleSeries/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SeriesListItem","_ref","series","react_default","a","createElement","Link","to","show","name","SeriesList","props","className","list","map","SeriesList_SeriesListItem","key","id","Loader","style","width","src","loaderSrc","alt","Intro","message","Series","state","seriesName","isFetching","onSeriesInputChange","e","_this","setState","target","value","fetch","then","response","json","console","log","_this$state","this","intro","type","onChange","length","trim","containers_Loader","src_containers_SeriesList","Component","SingleSeries","_this2","match","params","search","language","rating","image","original","React","Main","Switch","Route","exact","path","component","App","heigt","components_Main","Boolean","window","location","hostname","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adef8fa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.6e256cbd.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport \"./index.css\";\r\nimport {Link} from 'react-router-dom';\r\nconst SeriesListItem = ({series}) => (\r\n  <li>\r\n  <Link to={'/'+series.show.name}>\r\n  {series.show.name}\r\n  </Link>\r\n\r\n  </li>\r\n)\r\n\r\nconst SeriesList = (props) => {\r\n  return (\r\n    <div>\r\n    <ul className=\"series-list\">\r\n    {props.list.map(series => (\r\n      <SeriesListItem series={series} key = {series.show.id}/>\r\n    ))}\r\n    </ul>\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default SeriesList;\r\n","import React from 'react';\r\nimport loaderSrc from '../../Assets/loader.gif';\r\nconst Loader = props => (\r\n  <div>\r\n    <img\r\n    style= {{width:75}}\r\n    src={loaderSrc}\r\n    alt=\"Loader Icon\"\r\n        />\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import React from 'react'\r\nconst Intro = (props) => (\r\n  <p className=\"App-intro\">\r\n  {props.message}\r\n  </p>\r\n)\r\nexport default Intro;\r\n","import React, {Component} from 'react';\r\nimport SeriesList from '../../containers/SeriesList';\r\nimport Loader from '../../containers/Loader';\r\nimport Intro from '../../components/intro';\r\nclass Series extends Component{\r\n  state = {\r\n    series:[],\r\n    seriesName: '',\r\n    isFetching: false\r\n  }\r\n\r\n  onSeriesInputChange = e => {\r\n    this.setState({seriesName: e.target.value, isFetching:true,})\r\n    fetch('http://api.tvmaze.com/search/shows?q='+e.target.value)\r\n    .then(response => response.json())\r\n    .then(json => this.setState({series:json, isFetching:false}))\r\n    console.log(e)\r\n    console.log(e.target.value)\r\n  }\r\n  render(){\r\n    const {series, seriesName, isFetching} = this.state;\r\n    return (\r\n      <div>\r\n      <Intro message=\" Any Information You Need \" />\r\n      <div><input value={seriesName} type=\"text\" onChange={this.onSeriesInputChange} /> </div>\r\n      {series.length === 0 && seriesName.trim() === ''\r\n      && <p> Please Enter Series Name</p>}\r\n      {series.length === 0 && seriesName.trim() !== ''\r\n      &&\r\n      <p>No Tv Series found</p>}\r\n      {isFetching\r\n        && <Loader />}\r\n      <SeriesList list={this.state.series} />\r\n      <div>\r\n      </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default Series;\r\n","import React from 'react';\r\nimport Loader from '../../containers/Loader';\r\nimport 'whatwg-fetch';\r\nclass SingleSeries extends React.Component{\r\n  state = {\r\n    show: null\r\n  }\r\n  componentDidMount(){\r\n    fetch('http://api.tvmaze.com/search/shows?q='+this.props.match.params.search)\r\n    .then(response => response.json())\r\n    .then(json => this.setState({show:json}))\r\n  }\r\n  render(){\r\n    const {show} = this.state;\r\n    console.log(show);\r\n    return(\r\n      <div>\r\n      {show === null && <Loader />}\r\n      {show !== null &&\r\n        <div>\r\n        <p>Name: {show[0].show.name}</p>\r\n        <p>Language: {show[0].show.language}</p>\r\n        <p>Rating: {show[0].show.rating[0]}</p>\r\n        <img src = {show[0].show.image.original} alt=\"\"/>\r\n\r\n        <p>Show Has Been Loaded</p>\r\n        </div>\r\n      }\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SingleSeries;\r\n","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport Series from '../../containers/Series';\r\nimport SingleSeries from '../../containers/SingleSeries';\r\nconst Main = props => (\r\n  <Switch>\r\n    <Route exact path = \"/\" component={Series} />\r\n    <Route exact path = \"/:search\" component={SingleSeries} />\r\n  </Switch>\r\n);\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'whatwg-fetch';\nimport Series from './containers/Series';\nimport Intro from './components/intro';\nimport Main from './components/Main';\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n      <header style={{heigt: 50}} className=\"App-header\">\n      <h1 className=\"App-title\">Tv Series List</h1>\n      </header>\n      <Main />\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n//const greeting = React.createElement('h1',{},'Hello World');\nReactDOM.render(\n\n  <BrowserRouter><App /></BrowserRouter>,\n  document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}